- userAgent for vike-{vue,solid}
- improve vike.dev/head
- Remove `pageContext.data.title` from boilerplates
- cumulative
  - Make `<Head>` cumulative
  - passToClient.dev/cumulative => point to it from vike.dev/passToClient
- +client https://github.com/vikejs/vike/commit/732568999c11bd2904d0e2aec19a370c40594315
- New setting `cjsInterop` https://github.com/vikejs/vike/issues/1512
- Add x-powered-by header and add warning if missing (likely means that pageContext.httpResponse.headers isn't used)

v0.5 breaking changes:
- pageContext.url
- Forbid async Route Functions
- Forbid content-type
  - Maybe use x-powered-by header to check & enforce usage of pageContext.httpResponse.headers
- Deprecate old design
- Remove dist/server/importBuild.{cjs,mjs,js}
- See vike.dev/migration/v0.5
  - See also vike.dev/migration/v1
  - Shall all breaking changes be listed or is it enough to say "first update to latest 0.4.x then follow all warnings then update to 0.5"?
- See all TODOs
- Improve import paths.
  - Either move all isomorphic exports to `import * from 'vike'` or create individual export path for each export e.g. `import { render } from 'vike/render'`
    - E.g. remove `import * from 'vike/abort'` and `import * from 'vike/client'`
      ```diff
      - import * from 'vike/client/router'
      + import * from 'vike'
      // Or:
      + import { navigate } from 'vike/navigate'
      + import { prefetch } from 'vike/prefetch'
      ```
    - How about `vike/server`?
      - This one can probably stay bundled as loaded superfluous code on the server-side is probably ok, but let's double check how big the loaded superfluous code can be.
  - How about 'vike/types'? I guess move it to 'vike' iff. moving all isomorphics to 'vike'.
- Set `cjsInterop: true` by default?
- Communicate that v0.5 essentially is the v1.0.0 in disguise: the plan is to eventually rename the latest `v0.5.x` to `v1.0.0`.
  - The plan for releasing the v1.0.0 being:
    - Implement feature requests considered essential, most notably: [#562 - Transpile server code](https://github.com/vikejs/vike/issues/562)
    - Make a big release announcement and blog post with a completely rehauled landing page.
      - Blog post: my personal journey towards building Vike (for rationle why Vike exists, see landing page instead of reading blog bost).
- Make CJS warning an error.
  - Keep the CJS build for a little while and if no one complains then remove the CJS build.
- Make guard() hook server-side only by default?
- Presrve scroll for route parameters other than the first one?
  - https://github.com/vikejs/vike/issues/1459

Docs:
 - Improve /nextjs
 - Add /{react,vue,solid} links under "Overview"
   - Add "Server Actions" section to /react
   - UPDATE: actually, it's maybe a bad idea because there won't be much content at /vue and /solid if we apply the change described in the next bullet piont
     - Maybe we can move sections like "Server Actions" to /nextjs instead?
   - What should happen to the "Integration > React,Vue,Solid" links? How about making them a different page? E.g. moving `## Without Vike extension` there (while using <UseUiFrameworkVikeExtensionHint uiFrameworkName="React" noQuote={true} />).
   - Improve /{react,vue,solid}

- Add assertWarning() deprecations:
  - `pageContext.exports`
  - `pageContext.configEntries`

After V1 design release:
 - Replace in docs:
   ```diff
   - Environement: browser
   + Environement: client.
   ```
   ```diff
   - Environement: Node.js
   + Environement: server.
   ```
 - improve passToClient warning: https://github.com/vikejs/vike/tree/brillout/wip
 - Remove 0.4 design examples
 - [docs] Rewrite /head
 - Go through all TODOs in source code
 - Ensure what client-side loads is minimal
 - improve ignoring of dist/
 - Implement vike.config.js
   - Move all globals there and add migration warnings
 - Implement data() hook
   - Update `vike-{react,vue,solid}` +title.js config
   - New config requestPageContextOnNavigation
     ```ts
     type requestPageContextOnNavigation =
       | true // default
       | 'minimal' // Equivalent to `{ makeHooksUniversal: true }`. (Or maybe `{ makeHooksUniversal: ['data', 'onBeforeRender'] }`?)
       | false // Equivalent to { makeHooksUniversal: true, skipPageContextInit: true }
       | {
           makeHooksUniversal: true | ('onBeforeRender' | 'data' | 'guard')[] // Change env of hooks from `{ client: false, server: true }` to `{ client: true, server: true }`
           // Is `skipPageContextInit: true` too dangerous (the user may break its app)? I think it's ok and, so far, I think a warning in the docs is enough.
           skipPageContextInit: true | string[] // e.g. ['user']
         }
     ```
     - By default, only call guard() hooks on the server-side (if requestPageContextOnNavigation.minimal isn't true)
     - Re-apply assertNotNull() when requestPageContextOnNavigation is set to 'minimal' or false, see https://github.com/vikejs/vike/blob/a1b1ab4a250c564789358f7892d829eab6b17d27/vike/shared/page-configs/serialize/parseConfigValuesImported.ts#L52-L58
 - Make +client.js work for all render modes
   - In order to support [github.com/vikejs/vike-react#28 - Client-side init code](https://github.com/vikejs/vike-react/issues/28)
   - Use case: ad-hoc client-side scripts such as error tracking and analytics
   - revert/adapt commit "[failed-attempt] make +client.js work for all render modes (#1209)" https://github.com/vikejs/vike/commit/64e423bd6c2cee860defc8157e7aa176d62d42e0
   - Make +client.js cumulative
     - Is a new computed config `config.clusterId: number` needed?
       - Server Routing instead of Client Routing for two pages that have a different clusterId
       - We do need this if we want to be able to "remove" +client.js scripts upon navigation, in other word in order to ensure that a +client.js doesn't leak to sibling pages
       - While a less clean implementation is possible (e.g. by not caring about leaking +client.js scripts), implementing clusterId could fairly easy while being future proof
       - clusterId is an auto-increment number that uniquely identifies following combination:
          - The list of +client.js file paths (if two pages have a different list of +client.js => they have different clusterId)
          - onRenderClient() file path (e.g. if a page uses vike-react while another page uses vike-vue => they have different onRenderClient() => they have different clusterId)
          - Maybe: allow user to assign a "cluster name" with `config.clientRouting: string`. Is this needed?
 - Check why some deps aren't discovered by Vite's depOptimizer:
   - https://github.com/brillout/vike-react-query => why does Vite discover `part-regex` only later?
 - Check why dev startup is fairly slow, e.g. for /examples/react-full/ (I belive it used to be faster, is it related to Vite's initial dep crawling?)
 - Transpile & bunlded server for production: https://github.com/vikejs/vike/issues/1165
 - Replace boilerplates with Bati
 - Rewrite documentation to assume usage of `vike-{react,vue,solid}` (while preserving custom integration docs)

Features:
 - multiple error pages
 - nested layouts

- refactor logging
  - New hook onLog(): https://github.com/vikejs/vike/issues/1438
  - Exact same logs between prod and dev, only difference is that some log objects have:
    - `isDevLog: true`
    - `willBeLogged: false` in production
    - `showTimestamp: true`
  - Never clear screen (it's complex with little benefit)
    - Add shortcut to clear screen
    - Maybe rotate colors upon no requests wihtin 30s?
  - Only show a one-liner init log (instead of Vite's multi-line log)

Sometime:
 - Make `.server.js` and `.client.js` change env?
 - Replace "isomorphic"/"isomorph" to "universal"
 - remove documentProps from examples and boilerplates

Contact:
 - Bun
 - Payload CMS
   - Other CMS-related tools like Tina CMS
 - Shopify
 - https://gadget.dev/
   - https://twitter.com/harrybrundage/status/1691760859935109125
   - https://discord.com/channels/@me/1141741825871331408
 - Deno Deploy
 - Cloudflare Workers
 - UI frameworks like qwik (maybe even Angular)
   - See `pnpm create vite@latest` for a list of UI frameworks
